----------------------------------------------------------------------------
-- retourne x puissance n
function puiss <<const n: int>> (x:int)
returns (p:int);
let
p= with (n=1) then (1)
else (x*puiss<<n-1>>(x));
tel;

----------------------------------------------------------------------------
-- retourne l'entier represente en base 2  dans le booleen sur n bits
function entiernat <<const n: int>> (M: bool^n)
returns (S:int);
var i:int;
let
i= if (M[0]) then 1 else 0;
S=with (n=1) then (i)
else  ( 2*entiernat <<n-1>> (M[1..n-1]) + i);

tel;
node ent=entiernat<<4>>;

---------------------------------------------------------------------------------------
-- retourne l'entier relatif represente en complement a 2  dans le booleen sur n bits
function entierrel <<const n:int>>( M: bool^n)
returns (S:int);

let
-- si entier negatif alors S= valeur M en base 2 -( 2 puissance n+1)
-- sinon S= valeur M en base 2
S=if(M[n-1]) then (entiernat<<n>>(M)-puiss<<n+1>>(2)) else entiernat<<n>>(M);

tel;

node instentier = entierrel<<4>>;

----------------------------------------------------------------------------
-- retourne le tableau de booleen sur n bits representant en base 2 l'entier X
function entierbool <<const n: int>> (X:int)
returns (M: bool^n);
var i:int;
let
i=X  mod 2;

--Attention si X n est pas representable sur n bits le resultat est faux
M=with (n=1) then (if X=0 then [false] else( if X=1 then [true] else [false]))
else
(
 if X=0 then (false^n)
else
if X=1 then  ([true]|false^(n-1))
else  ( if (i=0)then ([false]|entierbool<<n-1>>(X/2))
        else ([true]|entierbool<<n-1>>(X/2))
      )
);
tel;

node insteb = entierbool<<4>>;
