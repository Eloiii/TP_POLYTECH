function add1bit (a, b, cin: bool) returns (r, cout : bool);
-- Circuit prenant 3 entrées, les opérandes a et b ainsi que la retenue -- entrante cin. Retourne l'addition effectuée dans r et la retenue dans -- cout
let
	r = a xor b xor cin;
	cout = (a and b) or (b and cin) or (a and cin);
tel;

---------------------------------------

function addnbits <<const n: int>>(A , B : bool^n ; cin : bool)
returns (R : bool^n ; cout : bool);
-- Fonction qui réalise une addition de n bits
-- A et B sont des tableaux de booléens et représentent les opérandes
-- cin est la retenue entrante.
var retint: bool^n+1;
-- retint est un tableau qui contient les retenues
let
	retint[0]= cin;
	(R, retint[1..n])= map<<add1bit, n >>( A, B, retint[0..n-1]);
	cout= retint[n];
tel;
-- on utilise add1bits pour réaliser l'addition avec l'instruction map 
-- qui permet de boucler n fois l'opération.

const x = 4;
function addxbits = addnbits<<x>>;

---------------------------------------

function ual <<const n: int>>(A, B: bool^n ; uc1, uc0 : bool)
returns (T : bool^n ; V,Z,N,C : bool);
let
	
tel;

const ratio = 4;
function UAL = ual<<ratio>>;

---------------------------------------

function opposenbits<<const n: int>>(A: bool^n)
returns (T: bool^n);
-- fonction qui retourne l'opposé du tableau de bits A
-- 0 -> 1 et 1 -> 0
-- Les valeurs de T (sortie) sont les inverses des valeurs de A (entrée)
let
	T[0..n-1] = map <<oppose, n>>(A);
tel;

---------------------------------------

function oppose(a: bool)
returns (r: bool)
-- Fonction qui inverse un bit
-- r, le résultat est l'inverse de a, l'entrée
let
	r = not a;
tel;

---------------------------------------

function opposenbitscomplement<<const n: int>>(A: bool^n)
returns (T: bool^n);
var b: bool^n;
var retfin : bool;
let
	b[1..n-1] = false^(n-1);
	b[0] = true;
	(T, retfin) = addnbits<<n>>(opposenbits<<n>>(A), b, false);
tel; 

const z = 8;
function opposenbitscomp = opposenbitscomplement<<z>>;

---------------------------------------

function subnbits <<const n: int>>(A , B : bool^n ; cin : bool)
returns (R : bool^n ; cout : bool);
-- Fonction qui réalise une soustraction de n bits
-- A et B sont des tableaux de booléens et représentent les opérandes
-- cin est la retenue entrante.
var retint: bool^n+1;
var invB: bool^n;
-- retint est un tableau qui contient les retenues
let
	invB = opposenbits<<n>>(B); -- OU opposenbitscomplement<<n>>(B);
	retint[0]= true;
	(R, retint[1..n])= map<<add1bit, n >>( A, invB, retint[0..n-1]);
	cout= not retint[n];
tel;

const y = 4;
function subxbits = subnbits<<y>>;

---------------------------------------

function increm <<const n: int>>(B : bool^n)
returns (R : bool^n; V, Z, N, C: bool);
-- Fonction qui réalise une incrémentation de 1 bit sur B
-- B es un tableau de booléens et représente l'opérande
var b: bool^n;
var retfin: bool;
var tempZ: bool;
let
	b[1..n-1] = false^(n-1);
	b[0] = true;
	(R, retfin) = addnbits<<n>>(B, b, false);
	N = retfin;
	tempZ = map<<checkZero, n-1>>(R[0..n-2], R[1..n-1]);
	Z = not tempZ;
	C = retfin;
	V = false; -- car complément à 2
tel;

const b = 4;
function incrementation = increm<<b>>;

--------------------------------------

function checkZero(a,b: bool)
returns (v: bool);
let
	v = a or b;
tel;


